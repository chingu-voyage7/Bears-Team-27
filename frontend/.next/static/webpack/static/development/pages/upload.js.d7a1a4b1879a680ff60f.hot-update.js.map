{"version":3,"file":"static/webpack/static\\development\\pages\\upload.js.d7a1a4b1879a680ff60f.hot-update.js","sources":["webpack:///./pages/upload.js"],"sourcesContent":["import Link from 'next/link';\r\nimport styled from 'styled-components';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport Thumbnail from '../components/Thumbnail';\r\nconst keys = require('../../config/keys');\r\nconst FileControl = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n\r\n  input[type='file'] {\r\n    height: 50px;\r\n    font-size: 1.5rem;\r\n  }\r\n  input[type='file']::-webkit-file-upload-button {\r\n    height: 50px;\r\n    font-size: 1.5rem;\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\nclass Upload extends React.Component {\r\n  uploadPreset = keys.uploadPreset;\r\n  cloudName = keys.cloudName;\r\n  ref = React.createRef();\r\n  xhrs = [];\r\n  state = {items: [], message: ''};\r\n\r\n  uploadFiles = e => {\r\n    const files = e.target.files;\r\n    const items = this.filesToItems(files);\r\n    this.setState({items, message: ''}, () => {\r\n      this.upload();\r\n    });\r\n  };\r\n\r\n  upload = () => {\r\n    const items = this.state.items;\r\n    if (items) {\r\n      items\r\n        .filter(item => !item.cancelled)\r\n        .forEach(item => {\r\n          this.uploadItem(item);\r\n        });\r\n    }\r\n  };\r\n  uploadItem = item => {\r\n    this.uploadFile(item.file, (progress, response) =>\r\n      this.updateFileProgress(item.index, progress, response),\r\n    );\r\n  };\r\n  clearIfAllCompleted() {\r\n    const completed = this.state.items.filter(item => item.progress === 100)\r\n      .length;\r\n    if (completed === this.state.items.length) {\r\n      setTimeout(() => {\r\n        this.setState(\r\n          {items: [], message: 'All Files Uploaded Successfully!'},\r\n          () => {\r\n            this.ref.current.value = '';\r\n          },\r\n        );\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  updateFileProgress(index, progress, response) {\r\n    const newItems = [...this.state.items];\r\n    newItems[index] = Object.assign(\r\n      {},\r\n      this.state.items[index],\r\n      {progress},\r\n      {response},\r\n    );\r\n    //todo\r\n    this.setState({items: newItems}, this.clearIfAllCompleted);\r\n    // this.setState({items: newItems});\r\n  }\r\n\r\n  uploadFile = (file, progressCallback) => {\r\n    if (file) {\r\n      const formData = new FormData();\r\n      const xhr = new XMLHttpRequest();\r\n      const url = `https://api.cloudinary.com/v1_1/${\r\n        this.cloudName\r\n      }/auto/upload`;\r\n      console.log(url);\r\n      formData.append('file', file, file.name);\r\n      formData.append('upload_preset', this.uploadPreset);\r\n      formData.append('tags', 'browserUpload');\r\n\r\n      //Upload completed successfully\r\n      xhr.onload = () => {\r\n        const response = JSON.parse(xhr.response);\r\n\r\n        var tokens = response.secure_url.split('/');\r\n        tokens.splice(-2, 0, 'w_150,h_150,c_scale');\r\n        tokens.splice(-4, 1);\r\n        tokens.splice(-1, 1, `${response.public_id.split('/')[1]}.jpg`);\r\n        const resource = {\r\n          name: file.name,\r\n          secureUrl: response.secure_url,\r\n          thumbnail: tokens.join('/'),\r\n        };\r\n\r\n        this.saveResourceRefToMongo(resource);\r\n        progressCallback(100, {\r\n          src: tokens.join('/'),\r\n          alt: response.public_id,\r\n          downloadUrl: response.secure_url,\r\n        });\r\n      };\r\n\r\n      xhr.upload.onprogress = e => {\r\n        if (e.lengthComputable) {\r\n          progressCallback((e.loaded / e.total) * 100, null);\r\n        }\r\n      };\r\n\r\n      xhr.open('POST', url, true);\r\n      xhr.send(formData);\r\n      this.xhrs[file.index] = xhr;\r\n    }\r\n  };\r\n\r\n  saveResourceRefToMongo = async resource => {\r\n    let header = new Headers({\r\n      'Content-Type': 'application/json',\r\n    });\r\n\r\n    const res = await fetch('http://localhost:3000/api/resources/new', {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: header,\r\n      body: JSON.stringify(resource),\r\n    });\r\n  };\r\n  filesToItems(files) {\r\n    const fileItems = Array.from(files);\r\n    const items = fileItems.map((f, i) => {\r\n      return {file: f, index: i, progress: 0, cancelled: false};\r\n    });\r\n    return items;\r\n  }\r\n  cancelFile = index => {\r\n    const newItems = [...this.state.items];\r\n    newItems[index] = Object.assign({}, this.state.items[index], {\r\n      cancelled: true,\r\n    });\r\n    if (this.xhrs[index]) {\r\n      this.xhrs[index].upload.removeEventListener('progress');\r\n      this.xhrs[index].removeEventListener('load');\r\n      this.xhrs[index].abort();\r\n    }\r\n    this.setState({items: newItems, message: ''}, () => {\r\n      this.ref.current.value = '';\r\n    });\r\n  };\r\n\r\n  displayUploads = () => {\r\n    const items = this.state.items;\r\n    if (items.length > 0) {\r\n      return <Thumbnail items={items} />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <FileControl>\r\n        <label htmlFor=\"file\">\r\n          <input\r\n            ref={this.ref}\r\n            type=\"file\"\r\n            multiple\r\n            id=\"file\"\r\n            name=\"file\"\r\n            placeholder=\"Upload Files\"\r\n            required\r\n            onChange={this.uploadFiles}\r\n          />\r\n        </label>\r\n        {this.state.message.length > 0 && (\r\n          <label style={{marginTop: '10px', fontSize: '1.2rem'}}>\r\n            {this.state.message}\r\n          </label>\r\n        )}\r\n        {this.state.items.length > 0 && (\r\n          <Thumbnail\r\n            items={this.state.items}\r\n            onCancelUpload={this.cancelFile}\r\n          />\r\n        )}\r\n      </FileControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AA4BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AACA;AANA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAkBA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AAlHA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;;;AA4DA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA7KA;AACA;AA+KA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}